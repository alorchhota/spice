% Generated by roxygen2: do not edit by hand
% Please edit documentation in
%   R/coexpression_known_interactions_precision_at_top.R
\name{coexpression_known_interactions_precision_at_top}
\alias{coexpression_known_interactions_precision_at_top}
\title{Precision of a co-expression network.}
\usage{
coexpression_known_interactions_precision_at_top(
  net,
  known,
  score.thresholds,
  n.top.edges = NA,
  na.ignore = "known",
  neg.treat = "error"
)
}
\arguments{
\item{net}{matrix or data.frame. A gene x gene matrix representing edge weights
between genes in a co-expression network. See details.}

\item{known}{matrix or data.frame. A gene x gene matrix representing the probability
that edges between genes true. See details.}

\item{score.thresholds}{numeric vector. Each value must be in the rage [0,1].
If known interaction score is equal to or greater than a score threshold,
the corresponding edge is considered true.}

\item{n.top.edges}{vector with numeric values or \code{NA}. The number of
top weighted edges in \code{net} to use to compute the precision.
If \code{NA}, the number of edges with a known interaction score
equal to or greater than the given score threshold is used.
If the number of edges is greater than the number of available edges,
all available edges are used.
If multiple edges have the same weight as the last top-weighted edge,
all of those edges are used.}

\item{na.ignore}{character representing how \code{NA}'s should be handled.
Accepted values are \code{'net'}, \code{'known'} and  \code{'any'}.
If \code{'net'}, edges with \code{NA} weight in \code{net} are ignored.
If \code{'known'}, edges with \code{NA} weight in \code{known} are ignored.
If \code{'any'}, edges with \code{NA} weight in either \code{net} or \code{known} are ignored.}

\item{neg.treat}{character representing how negative values in \code{net} should be treated.
Accepted values are \code{'none'}, \code{'warn'} and  \code{'error'}.
If \code{'allow'}, negative values are allowed.
If \code{'warn'}, a warning is generated.
If \code{'error'}, an error is generated.}
}
\value{
A matrix with \code{length(score.thresholds)} rows and
\code{length(n.top.edges)} columns.
Each value in the matrix represent the precision at a given number of top edges (column)
using a given score threshold (row).
}
\description{
This function computes the precision of a co-expression network at top edges
i.e., the fraction of true edges in a given number of top weighted edges.
It has options to set the number of top edges and the known score thresholds
to define which edges are true.
}
\details{
Each value in \code{known} must be in the range [0, 1] representing
the probability that the corresponding edge (interaction) is true.
While the values in \code{net} are not limited to any range,
each value should represent the relative probability that
the corresponding edge is true. In other words, larger values should
represent higher confidence in corresponding edges.
If the sign of values in \code{net} represents positive or negative
associations between genes, you probably should provide absolute values.
If you still want to allow negative values in \code{net},
you may set \code{neg.treat = "allow"}.
In this case, any negative value will represent lower confidence than
any non-negative value.

Both \code{net} and \code{known} must be square matrices of same dimension.
Either both or none of the matrices should have row and column names.
If available, the set of row names and column names must be unique and same in each matrix.
The set of row and columns names of both matrices should also be same.
Both matrices must be symmetric when rows and columns are in the same order.
Diagonal entries in the matrices are ignored.
}
\examples{
genes = sprintf("G\%d", 1:10)
dummy_net = matrix(rnorm(length(genes)^2), nrow = length(genes), dimnames = list(genes, genes))
dummy_net = abs((dummy_net + t(dummy_net))/2)                    # symmetric undirected nework
dummy_ppi = abs(dummy_net + rnorm(length(dummy_net)))
dummy_ppi = (dummy_ppi + t(dummy_ppi)) / (2 * max(dummy_ppi))    # symmetric known interaction probability
net_precision = coexpression_known_interactions_precision_at_top(net = dummy_net, known = dummy_ppi, n.top.edges = c(10, 30, NA), score.thresholds = c(0.25, 0.5))
print(net_precision)
}
