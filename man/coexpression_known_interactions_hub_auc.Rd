% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/coexpression_known_interactions_hub_auc.R
\name{coexpression_known_interactions_hub_auc}
\alias{coexpression_known_interactions_hub_auc}
\title{Evaluate co-expression network's ability to find hubs in known gene-gene interactions.}
\usage{
coexpression_known_interactions_hub_auc(
  net,
  known,
  curve = F,
  max.compute = F,
  min.compute = F,
  rand.compute = F,
  dg.compute = F,
  na.ignore = "known",
  neg.treat = "error"
)
}
\arguments{
\item{net}{matrix or data.frame. A gene x gene matrix representing edge weights
between genes in a co-expression network. See details.}

\item{known}{matrix or data.frame. A gene x gene matrix representing the probability
that edges between genes true. See details.}

\item{curve}{logical. Should the curves be returned?}

\item{max.compute}{logical. Should the maximum area under the curve be computed?}

\item{min.compute}{logical. Should the minimum area under the curve be computed?}

\item{rand.compute}{logical. Should the are under the curve for a random classifier be computed?}

\item{dg.compute}{logical. Should the area under the precision-recall curve
according to the interpolation of Davis and Goadrich be computed?}

\item{na.ignore}{character representing how \code{NA}'s should be handled.
Accepted values are \code{'net'}, \code{'known'} and  \code{'any'}.
If \code{'net'}, edges with \code{NA} weight in \code{net} are ignored.
If \code{'known'}, edges with \code{NA} weight in \code{known} are ignored.
If \code{'any'}, edges with \code{NA} weight in either \code{net} or \code{known} are ignored.}

\item{neg.treat}{character representing how negative values in \code{net} should be treated.
Accepted values are \code{'none'}, \code{'warn'} and  \code{'error'}.
If \code{'allow'}, negative values are allowed.
If \code{'warn'}, a warning is generated.
If \code{'error'}, an error is generated.}
}
\value{
A list object with the following items.
\item{pr}{Precision-recall curve object. See \code{\link[PRROC]{pr.curve}} for details.}
\item{roc}{Roc curve object. See \code{\link[PRROC]{roc.curve}} for details.}
}
\description{
The centrality of each gene is computed as the sum of weights of
all edges connected to it.
Area under the curve to find known hubs is computed using centrality of genes
in the known interaction network normalized by the maximum centrality
as the probability that the gene is a true hub.
Both the area under the precision-recall curve and the area under the ROC curve
are computed.
}
\details{
Each value in \code{known} must be in the range [0, 1] representing
the probability that the corresponding edge (interaction) is true.
While the values in \code{net} are not limited to any range,
each value should represent the relative probability that
the corresponding edge is true. In other words, larger values should
represent higher confidence in corresponding edges.
If the sign of values in \code{net} represents positive or negative
associations between genes, you probably should provide absolute values.
If you still want to allow negative values in \code{net},
you may set \code{neg.treat = "allow"}.
In this case, any negative value will represent lower confidence than
any non-negative value.

Both \code{net} and \code{known} must be square matrices of same dimension.
Either both or none of the matrices should have row and column names.
If available, the set of row names and column names must be unique and same in each matrix.
The set of row and columns names of both matrices should also be same.
Both matrices must be symmetric when rows and columns are in the same order.
Diagonal entries in the matrices are ignored.
}
\examples{
genes = sprintf("G\%d", 1:10)
dummy_net = matrix(rnorm(length(genes)^2), nrow = length(genes), dimnames = list(genes, genes))
dummy_net = abs((dummy_net + t(dummy_net))/2)                    # symmetric undirected nework
dummy_ppi = abs(dummy_net + rnorm(length(dummy_net)))
dummy_ppi = (dummy_ppi + t(dummy_ppi)) / (2 * max(dummy_ppi))    # symmetric known interaction probability
hub_auc = coexpression_known_interactions_hub_auc(net = dummy_net, known = dummy_ppi)
print(sprintf('Area under the precision-recall curve: \%g', hub_auc$pr$auc.integral))
print(sprintf('Area under the ROC curve: \%g', hub_auc$roc$auc))
}
