// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// kruskal_mst_c
DataFrame kruskal_mst_c(NumericMatrix x, const bool maximum);
RcppExport SEXP _spice_kruskal_mst_c(SEXP xSEXP, SEXP maximumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type maximum(maximumSEXP);
    rcpp_result_gen = Rcpp::wrap(kruskal_mst_c(x, maximum));
    return rcpp_result_gen;
END_RCPP
}
// make_symmetric
void make_symmetric(NumericMatrix x, const String method);
RcppExport SEXP _spice_make_symmetric(SEXP xSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< const String >::type method(methodSEXP);
    make_symmetric(x, method);
    return R_NilValue;
END_RCPP
}
// get_lower_triangle_vector
NumericVector get_lower_triangle_vector(const NumericMatrix x, const bool diagonal, const bool bycol);
RcppExport SEXP _spice_get_lower_triangle_vector(SEXP xSEXP, SEXP diagonalSEXP, SEXP bycolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool >::type diagonal(diagonalSEXP);
    Rcpp::traits::input_parameter< const bool >::type bycol(bycolSEXP);
    rcpp_result_gen = Rcpp::wrap(get_lower_triangle_vector(x, diagonal, bycol));
    return rcpp_result_gen;
END_RCPP
}
// set_lower_triangle_vector
void set_lower_triangle_vector(NumericMatrix x, const NumericVector lt, bool bycol);
RcppExport SEXP _spice_set_lower_triangle_vector(SEXP xSEXP, SEXP ltSEXP, SEXP bycolSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type lt(ltSEXP);
    Rcpp::traits::input_parameter< bool >::type bycol(bycolSEXP);
    set_lower_triangle_vector(x, lt, bycol);
    return R_NilValue;
END_RCPP
}
// replace_NA_in_matrix
void replace_NA_in_matrix(NumericMatrix x, const double value);
RcppExport SEXP _spice_replace_NA_in_matrix(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type value(valueSEXP);
    replace_NA_in_matrix(x, value);
    return R_NilValue;
END_RCPP
}
// set_absolute_values_in_matrix
void set_absolute_values_in_matrix(NumericMatrix x);
RcppExport SEXP _spice_set_absolute_values_in_matrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    set_absolute_values_in_matrix(x);
    return R_NilValue;
END_RCPP
}
// set_diag
void set_diag(NumericMatrix x, const double value);
RcppExport SEXP _spice_set_diag(SEXP xSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type value(valueSEXP);
    set_diag(x, value);
    return R_NilValue;
END_RCPP
}
// update_rankprod_matrix
void update_rankprod_matrix(NumericMatrix rankprod, const NumericVector ranks);
RcppExport SEXP _spice_update_rankprod_matrix(SEXP rankprodSEXP, SEXP ranksSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type rankprod(rankprodSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type ranks(ranksSEXP);
    update_rankprod_matrix(rankprod, ranks);
    return R_NilValue;
END_RCPP
}
// from_sampled_assoc_matrix_to_all_assoc_vector
NumericVector from_sampled_assoc_matrix_to_all_assoc_vector(const NumericMatrix sampled_assoc, const CharacterVector all_genes, const bool from_dist);
RcppExport SEXP _spice_from_sampled_assoc_matrix_to_all_assoc_vector(SEXP sampled_assocSEXP, SEXP all_genesSEXP, SEXP from_distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type sampled_assoc(sampled_assocSEXP);
    Rcpp::traits::input_parameter< const CharacterVector >::type all_genes(all_genesSEXP);
    Rcpp::traits::input_parameter< const bool >::type from_dist(from_distSEXP);
    rcpp_result_gen = Rcpp::wrap(from_sampled_assoc_matrix_to_all_assoc_vector(sampled_assoc, all_genes, from_dist));
    return rcpp_result_gen;
END_RCPP
}
// get_rankprod_vector_from_matrix
NumericVector get_rankprod_vector_from_matrix(NumericMatrix rankprod);
RcppExport SEXP _spice_get_rankprod_vector_from_matrix(SEXP rankprodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type rankprod(rankprodSEXP);
    rcpp_result_gen = Rcpp::wrap(get_rankprod_vector_from_matrix(rankprod));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_spice_kruskal_mst_c", (DL_FUNC) &_spice_kruskal_mst_c, 2},
    {"_spice_make_symmetric", (DL_FUNC) &_spice_make_symmetric, 2},
    {"_spice_get_lower_triangle_vector", (DL_FUNC) &_spice_get_lower_triangle_vector, 3},
    {"_spice_set_lower_triangle_vector", (DL_FUNC) &_spice_set_lower_triangle_vector, 3},
    {"_spice_replace_NA_in_matrix", (DL_FUNC) &_spice_replace_NA_in_matrix, 2},
    {"_spice_set_absolute_values_in_matrix", (DL_FUNC) &_spice_set_absolute_values_in_matrix, 1},
    {"_spice_set_diag", (DL_FUNC) &_spice_set_diag, 2},
    {"_spice_update_rankprod_matrix", (DL_FUNC) &_spice_update_rankprod_matrix, 2},
    {"_spice_from_sampled_assoc_matrix_to_all_assoc_vector", (DL_FUNC) &_spice_from_sampled_assoc_matrix_to_all_assoc_vector, 3},
    {"_spice_get_rankprod_vector_from_matrix", (DL_FUNC) &_spice_get_rankprod_vector_from_matrix, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_spice(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
